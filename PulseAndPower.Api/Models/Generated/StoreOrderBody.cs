/*
 * Сервис спортзалов Pulse&Power
 *
 * Позволяет совершать регистрацию, вход в аккаунт, а так же покупку абонементов в спортзал
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;

namespace PulseAndPower.Models.Generated;

public class StoreOrderBody : IEquatable<StoreOrderBody>
{ 
    /// <summary>
    /// Gets or Sets SubscriptionId
    /// </summary>

    [DataMember(Name="subscriptionId")]
    public string SubscriptionId { get; set; }

    /// <summary>
    /// Gets or Sets PaymentInfo
    /// </summary>

    [DataMember(Name="paymentInfo")]
    public string PaymentInfo { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class StoreOrderBody {\n");
        sb.Append("  SubscriptionId: ").Append(SubscriptionId).Append("\n");
        sb.Append("  PaymentInfo: ").Append(PaymentInfo).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj)) return false;
        if (ReferenceEquals(this, obj)) return true;
        return obj.GetType() == GetType() && Equals((StoreOrderBody)obj);
    }

    /// <summary>
    /// Returns true if StoreOrderBody instances are equal
    /// </summary>
    /// <param name="other">Instance of StoreOrderBody to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(StoreOrderBody other)
    {
        if (ReferenceEquals(null, other)) return false;
        if (ReferenceEquals(this, other)) return true;

        return 
            (
                SubscriptionId == other.SubscriptionId ||
                SubscriptionId != null &&
                SubscriptionId.Equals(other.SubscriptionId)
            ) && 
            (
                PaymentInfo == other.PaymentInfo ||
                PaymentInfo != null &&
                PaymentInfo.Equals(other.PaymentInfo)
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            // Suitable nullity checks etc, of course :)
            if (SubscriptionId != null)
                hashCode = hashCode * 59 + SubscriptionId.GetHashCode();
            if (PaymentInfo != null)
                hashCode = hashCode * 59 + PaymentInfo.GetHashCode();
            return hashCode;
        }
    }

    #region Operators
#pragma warning disable 1591

    public static bool operator ==(StoreOrderBody left, StoreOrderBody right)
    {
        return Equals(left, right);
    }

    public static bool operator !=(StoreOrderBody left, StoreOrderBody right)
    {
        return !Equals(left, right);
    }

#pragma warning restore 1591
    #endregion Operators
}