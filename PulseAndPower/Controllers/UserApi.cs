/*
 * Сервис спортзалов Pulse&Power
 *
 * Позволяет совершать регистрацию, вход в аккаунт, а так же покупку абонементов в спортзал
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UserApiController : ControllerBase
    { 
        /// <summary>
        /// Delete favourite place for user
        /// </summary>
        /// <param name="addressGuid"></param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">Authentication failed</response>
        /// <response code="500">Server error</response>
        [HttpDelete]
        [Route("/api/v1_0/user/favouritePlaces/{addressGuid}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Address>), description: "successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Server error")]
        public virtual IActionResult UserFavouritePlacesAddressGuidDelete([FromRoute][Required]string addressGuid)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Address>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"city\" : \"Екатеринбург\",\n  \"street\" : \"Ленина 71\",\n  \"coordinates\" : \"56.922923, 59.909311\",\n  \"id\" : \"c7cbf04e-c336-c248-b345-24d673f1955d\",\n  \"state\" : \"Свердловская область\"\n}, {\n  \"city\" : \"Екатеринбург\",\n  \"street\" : \"Ленина 71\",\n  \"coordinates\" : \"56.922923, 59.909311\",\n  \"id\" : \"c7cbf04e-c336-c248-b345-24d673f1955d\",\n  \"state\" : \"Свердловская область\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Address>>(exampleJson)
                        : default(List<Address>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add new favourite place for user
        /// </summary>
        /// <param name="addressGuid"></param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">Authentication failed</response>
        /// <response code="500">Server error</response>
        [HttpPut]
        [Route("/api/v1_0//user/favouritePlaces/{addressGuid}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UserFavouritePlacesAddressGuidPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Address>), description: "successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Server error")]
        public virtual IActionResult UserFavouritePlacesAddressGuidPut([FromRoute][Required]string addressGuid)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Address>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"city\" : \"Екатеринбург\",\n  \"street\" : \"Ленина 71\",\n  \"coordinates\" : \"56.922923, 59.909311\",\n  \"id\" : \"c7cbf04e-c336-c248-b345-24d673f1955d\",\n  \"state\" : \"Свердловская область\"\n}, {\n  \"city\" : \"Екатеринбург\",\n  \"street\" : \"Ленина 71\",\n  \"coordinates\" : \"56.922923, 59.909311\",\n  \"id\" : \"c7cbf04e-c336-c248-b345-24d673f1955d\",\n  \"state\" : \"Свердловская область\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Address>>(exampleJson)
                        : default(List<Address>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get favourite places for user
        /// </summary>
        /// <response code="200">successful operation</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">Authentication failed</response>
        /// <response code="500">Server error</response>
        [HttpGet]
        [Route("/api/v1_0//user/favouritePlaces")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UserFavouritePlacesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Address>), description: "successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Server error")]
        public virtual IActionResult UserFavouritePlacesGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Address>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"city\" : \"Екатеринбург\",\n  \"street\" : \"Ленина 71\",\n  \"coordinates\" : \"56.922923, 59.909311\",\n  \"id\" : \"c7cbf04e-c336-c248-b345-24d673f1955d\",\n  \"state\" : \"Свердловская область\"\n}, {\n  \"city\" : \"Екатеринбург\",\n  \"street\" : \"Ленина 71\",\n  \"coordinates\" : \"56.922923, 59.909311\",\n  \"id\" : \"c7cbf04e-c336-c248-b345-24d673f1955d\",\n  \"state\" : \"Свердловская область\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Address>>(exampleJson)
                        : default(List<Address>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get user info
        /// </summary>
        /// <response code="200">successful operation</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">Authentication failed</response>
        /// <response code="500">Server error</response>
        [HttpGet]
        [Route("/api/v1_0//user")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UserGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(User), description: "successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Server error")]
        public virtual IActionResult UserGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(User));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"firstName\" : \"Иван\",\n  \"lastName\" : \"Иванов\",\n  \"patronymic\" : \"Иванович\",\n  \"phone\" : \"79121234567\",\n  \"favouritePlaces\" : [ {\n    \"city\" : \"Екатеринбург\",\n    \"street\" : \"Ленина 71\",\n    \"coordinates\" : \"56.922923, 59.909311\",\n    \"id\" : \"c7cbf04e-c336-c248-b345-24d673f1955d\",\n    \"state\" : \"Свердловская область\"\n  }, {\n    \"city\" : \"Екатеринбург\",\n    \"street\" : \"Ленина 71\",\n    \"coordinates\" : \"56.922923, 59.909311\",\n    \"id\" : \"c7cbf04e-c336-c248-b345-24d673f1955d\",\n    \"state\" : \"Свердловская область\"\n  } ],\n  \"id\" : \"0c89fd1b-b45c-45bd-84f3-e33e8193300a\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<User>(exampleJson)
                        : default(User);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Patch user
        /// </summary>
        /// <remarks>This can only be done by the logged in user.</remarks>
        /// <param name="body">New user info. May not include all fields in request</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">Authentication failed</response>
        /// <response code="500">Server error</response>
        [HttpPatch]
        [Route("/api/v1_0//user")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UserPatch")]
        [SwaggerResponse(statusCode: 200, type: typeof(User), description: "successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Server error")]
        public virtual IActionResult UserPatch([FromBody]User body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(User));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"firstName\" : \"Иван\",\n  \"lastName\" : \"Иванов\",\n  \"patronymic\" : \"Иванович\",\n  \"phone\" : \"79121234567\",\n  \"favouritePlaces\" : [ {\n    \"city\" : \"Екатеринбург\",\n    \"street\" : \"Ленина 71\",\n    \"coordinates\" : \"56.922923, 59.909311\",\n    \"id\" : \"c7cbf04e-c336-c248-b345-24d673f1955d\",\n    \"state\" : \"Свердловская область\"\n  }, {\n    \"city\" : \"Екатеринбург\",\n    \"street\" : \"Ленина 71\",\n    \"coordinates\" : \"56.922923, 59.909311\",\n    \"id\" : \"c7cbf04e-c336-c248-b345-24d673f1955d\",\n    \"state\" : \"Свердловская область\"\n  } ],\n  \"id\" : \"0c89fd1b-b45c-45bd-84f3-e33e8193300a\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<User>(exampleJson)
                        : default(User);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create user
        /// </summary>
        /// <remarks>This can only be done by the logged in user.</remarks>
        /// <param name="body">Created user object</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">Authentication failed</response>
        /// <response code="500">Server error</response>
        [HttpPut]
        [Route("/api/v1_0//user")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UserPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(User), description: "successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Server error")]
        public virtual IActionResult UserPut([FromBody]User body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(User));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"firstName\" : \"Иван\",\n  \"lastName\" : \"Иванов\",\n  \"patronymic\" : \"Иванович\",\n  \"phone\" : \"79121234567\",\n  \"favouritePlaces\" : [ {\n    \"city\" : \"Екатеринбург\",\n    \"street\" : \"Ленина 71\",\n    \"coordinates\" : \"56.922923, 59.909311\",\n    \"id\" : \"c7cbf04e-c336-c248-b345-24d673f1955d\",\n    \"state\" : \"Свердловская область\"\n  }, {\n    \"city\" : \"Екатеринбург\",\n    \"street\" : \"Ленина 71\",\n    \"coordinates\" : \"56.922923, 59.909311\",\n    \"id\" : \"c7cbf04e-c336-c248-b345-24d673f1955d\",\n    \"state\" : \"Свердловская область\"\n  } ],\n  \"id\" : \"0c89fd1b-b45c-45bd-84f3-e33e8193300a\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<User>(exampleJson)
                        : default(User);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
