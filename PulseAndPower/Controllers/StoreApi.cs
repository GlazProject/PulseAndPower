/*
 * Сервис спортзалов Pulse&Power
 *
 * Позволяет совершать регистрацию, вход в аккаунт, а так же покупку абонементов в спортзал
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class StoreApiController : ControllerBase
    { 
        /// <summary>
        /// Place an order for a subscription based on previous order
        /// </summary>
        /// <param name="previousOrderId"></param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">Authentication failed</response>
        /// <response code="500">Server error</response>
        [HttpPut]
        [Route("/api/v1_0//store/order/{previousOrderId}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("StoreOrderPreviousOrderIdPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(Order), description: "successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Server error")]
        public virtual IActionResult StoreOrderPreviousOrderIdPut([FromRoute][Required]string previousOrderId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Order));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"date\" : \"date\",\n  \"id\" : \"0c89fd1b-b45c-45bd-84f3-e33e8193300a\",\n  \"subscriptionId\" : \"0c89fd1b-b45c-45bd-84f3-e33e8193300a\",\n  \"userId\" : \"0c89fd1b-b45c-45bd-84f3-e33e8193300a\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Order>(exampleJson)
                        : default(Order);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Place an order for a subscription
        /// </summary>
        /// <remarks>Place a new order in the store with payment confirmation</remarks>
        /// <param name="body"></param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">Authentication failed</response>
        /// <response code="500">Server error</response>
        [HttpPut]
        [Route("/api/v1_0//store/order")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("StoreOrderPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(Order), description: "successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Server error")]
        public virtual IActionResult StoreOrderPut([FromBody]StoreOrderBody body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Order));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"date\" : \"date\",\n  \"id\" : \"0c89fd1b-b45c-45bd-84f3-e33e8193300a\",\n  \"subscriptionId\" : \"0c89fd1b-b45c-45bd-84f3-e33e8193300a\",\n  \"userId\" : \"0c89fd1b-b45c-45bd-84f3-e33e8193300a\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Order>(exampleJson)
                        : default(Order);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get all orders for user
        /// </summary>
        /// <response code="200">successful operation</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">Authentication failed</response>
        /// <response code="500">Server error</response>
        [HttpGet]
        [Route("/api/v1_0//store/orders")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("StoreOrdersGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2001), description: "successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Server error")]
        public virtual IActionResult StoreOrdersGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2001));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"orders\" : [ {\n    \"date\" : \"date\",\n    \"id\" : \"0c89fd1b-b45c-45bd-84f3-e33e8193300a\",\n    \"subscriptionId\" : \"0c89fd1b-b45c-45bd-84f3-e33e8193300a\",\n    \"userId\" : \"0c89fd1b-b45c-45bd-84f3-e33e8193300a\"\n  }, {\n    \"date\" : \"date\",\n    \"id\" : \"0c89fd1b-b45c-45bd-84f3-e33e8193300a\",\n    \"subscriptionId\" : \"0c89fd1b-b45c-45bd-84f3-e33e8193300a\",\n    \"userId\" : \"0c89fd1b-b45c-45bd-84f3-e33e8193300a\"\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse2001>(exampleJson)
                        : default(InlineResponse2001);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Return list of places where sport center exists
        /// </summary>
        /// <response code="200">successful operation</response>
        [HttpGet]
        [Route("/api/v1_0//store/places")]
        [ValidateModelState]
        [SwaggerOperation("StorePlacesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse200), description: "successful operation")]
        public virtual IActionResult StorePlacesGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse200));
            string exampleJson = null;
            exampleJson = "{\n  \"places\" : [ {\n    \"city\" : \"Екатеринбург\",\n    \"street\" : \"Ленина 71\",\n    \"coordinates\" : \"56.922923, 59.909311\",\n    \"id\" : \"c7cbf04e-c336-c248-b345-24d673f1955d\",\n    \"state\" : \"Свердловская область\"\n  }, {\n    \"city\" : \"Екатеринбург\",\n    \"street\" : \"Ленина 71\",\n    \"coordinates\" : \"56.922923, 59.909311\",\n    \"id\" : \"c7cbf04e-c336-c248-b345-24d673f1955d\",\n    \"state\" : \"Свердловская область\"\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse200>(exampleJson)
                        : default(InlineResponse200);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Return information about available season tickets
        /// </summary>
        /// <response code="200">successful operation</response>
        [HttpGet]
        [Route("/api/v1_0//store/subscriptions")]
        [ValidateModelState]
        [SwaggerOperation("StoreSubscriptionsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Subscriptions), description: "successful operation")]
        public virtual IActionResult StoreSubscriptionsGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Subscriptions));
            string exampleJson = null;
            exampleJson = "{\n  \"duration\" : [ {\n    \"timeSpan\" : \"timeSpan\",\n    \"friendlyValue\" : \"6 месяцев\"\n  }, {\n    \"timeSpan\" : \"timeSpan\",\n    \"friendlyValue\" : \"6 месяцев\"\n  } ],\n  \"subscriptions\" : [ {\n    \"coast\" : 42000\n  }, {\n    \"coast\" : 42000\n  } ],\n  \"options\" : [ \"Всё включено\", \"Всё включено\" ],\n  \"timeOfDay\" : [ \"Весь день\", \"Весь день\" ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Subscriptions>(exampleJson)
                        : default(Subscriptions);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Return information about specified subscription
        /// </summary>
        /// <param name="subscriptionId"></param>
        /// <response code="200">successful operation</response>
        [HttpGet]
        [Route("/api/v1_0//store/subscriptions/{subscriptionId}")]
        [ValidateModelState]
        [SwaggerOperation("StoreSubscriptionsSubscriptionIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Subscription), description: "successful operation")]
        public virtual IActionResult StoreSubscriptionsSubscriptionIdGet([FromRoute][Required]string subscriptionId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Subscription));
            string exampleJson = null;
            exampleJson = "{\n  \"coast\" : 42000\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Subscription>(exampleJson)
                        : default(Subscription);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
